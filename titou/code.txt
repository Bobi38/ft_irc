#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>         // close()
#include <arpa/inet.h>      // inet_ntoa(), htons(), etc.
#include <netinet/in.h>     // struct sockaddr_in
#include <sys/socket.h>     // socket(), bind(), listen(), accept()

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];

    // 1. Créer la socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // 2. Configuration de l’adresse du serveur
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;     // écoute sur toutes les interfaces
    server_addr.sin_port = htons(PORT);           // port 8080, converti en format réseau

    // 3. Lier la socket à l’adresse
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // 4. Mettre en écoute
    if (listen(server_fd, 5) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Serveur en écoute sur le port %d...\n", PORT);

    // 5. Accepter une connexion
    client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_len);
    if (client_fd < 0) {
        perror("accept");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Connexion acceptée de %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

    // 6. Recevoir un message
    int bytes_received = recv(client_fd, buffer, BUFFER_SIZE - 1, 0);
    if (bytes_received < 0) {
        perror("recv");
    } else {
        buffer[bytes_received] = '\0';
        printf("Message reçu : %s\n", buffer);

        // 7. Répondre au client
        const char *response = "Bonjour depuis le serveur !";
        send(client_fd, response, strlen(response), 0);
    }

    // 8. Fermer les sockets
    close(client_fd);
    close(server_fd);
    printf("Connexion fermée.\n");

    return 0;
}
